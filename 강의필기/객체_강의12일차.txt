@ 객체 지향 프로그래밍이란?
-> 현실 세계는 사물이나 어떠한 개념 처럼 독립되고 구분되는 각각의 객체로 이루여져있음
-> 각각의 독립되는 형태로 구현되어 있는것이 객체이고 이 개념을 바탕으로 
프로그래밍을 하는 것을 객체 지향 프로그래밍이라고 함
	* 객체지향 언어는 객체 지향 프로그래밍을 하기 위해 만들어진 언어
-> 프로그램 객체를 만들기 위해서는 실제 객체에 대한 분석이 필요함
-> 객체를 표현하는 것에는 속성(데이터)와 기능(메소드)을 가지고 있음

@ 객체지향 용어
클래스 : 객체를 만들기 위한 설계도 혹은 틀
	사물이나 개념의 공통요소(속성, 기능)를 용도에 맞게 추상화 해야함

추상화 : 프로그램에서 필요한 속성과 기능을 추출하고 불필요한 것을 제거 하는 과정
	프로그래밍적으로 보았을때 속성(변수)으로 사용할것과
	기능(메소드)으로 구현할 것들을 설계하는 과정

절차지향

변수 : 데이터를 저장하는 공간.
배열 : 데이터를 연속적으로 저장하는 공간.( 같은 타입)
구조체 : 여러 데이터 타입의 데이터를 저장하는 공간.


@ 객체 지향 프로그래밍을 하기 위한 단계

1. 대상 물색
2. 추상화
3. 클래스 작성 ( 설계 )
4. 인스턴스화 ( 사용 )


ex)  모니터를 대상으로 Class 화 시키기
1. 대상물색 -> 모니터
2. 추상화 -> 
	#속성
	사이즈( 인치)
	화소
	모델명
	가격
	제조회사
	#기능
	정보입력
	출력
	전원(on, off)
	밝기조정
3. 



@ 객체지향의 3대 원칙

1. 캡슐화
	-> 정보은닉
2. 상속
3. 다형성


@ 접근제어 지시자
-> 클래스안에서 변수 및 메소드 생성시 접근제어 지시자를 사용 해야함
-> 접근제어 키워드는 public, protected, default, private이있음
-> 접근제어 지시자는 접근할때 허용하는 범위를 말하는것
-> 접근제어 지시자를 작성하지 않으면 default로 설정됨.


public : 어디서든 접근 허용
protected : 후손클래스(상속), 같은 패키지 내, 해당 클래스 내부에서 접근 가능
default : 같은 패키지 내 , 해당 클래스 내부에서 접근 가능
private : 해당 클래스에서만 접근 가능

원칙
-> 클래스안의 멤버변수는 private으로 설정하는 것을 원칙으로 함.
	(멤버변수는 데이터를 저장하고 있는 중요한 공긴이기 때문에 보호해야함)
-> 클래스안의 멤버 변수들은 다양하게 사용할수 있음(기본은 public)


@ 정보은닉
-> 정보를 숨기는 것을 정보 은닉이라고 함

## 정보 은닉의 필요성 ##
-> 클래스의 멤버 변수는 일반적으로 private영역에 저장함
-> 의도치 않은 외부 접근에 대한 오류를 방지하기 위함

-> 클래스를 만든 개발자는 해당 클래스의 멤버 변수를 타 사용자가 마음대로
바꾸게 두어서는 안됨(흐름의 문제가 발생할수있음)

@ 캡슐화
-> 하나의 객체는 독립적으로 완벽한 역할을 수행할수있어야 함
-> 정보은닉 +  독립적인 역할을 캡슐화 작업을 하였다 라고 볼수있음
	* 독립적인 역할만 하고 정보은닉이 되지 않는것은 캡슐화가 되지 못한 것임



@gatter ,메소드와 setter메소드

-> private으로 설정된 멤버변수들은 외부에서 접근이 불가능함
-> 하지만 실제로 해당 클래스를 객체화해서 사용해야하는 사용자 입장에서는
멤버변수의 데이터를 대입할수 있어야함
-> 이때 메소드는 public  으로 만든다 라는 개념으로 알고 있기 때문에 메소드를
public 으로 만들고 사용자는 해당 메소드를 이용하여 데이터를 넣을수 있게 만들어야함
-> 하지만 우리가 멤버 변수에 넣는 메소드의 이름을 개발자 마음대로 정한다면
사용자 입장에서 메소드 이름만 보고 적절하게 사요할수있을가?
-> 개발자가 마음대로 정한 메소드 명만 보고 사용하기에는 무리가 있음
-> 그렇게 되면 결국 사용자는 해당 클래스를 열어서 확인할 수밖에 없고, 
확인과 동시에 클래스의캡슐화는 깨지게 됨
(캡슐화는  정보은닉 + 독립적인 객체로 동작해야 하므로 실제 내부 코드를 보지 않고도
사용자는 사용할 수 있어야함)
-> 그렇기 때문에 Class 를 개발할때 멤버변수의 값을 넣거나 혹은 꺼낼 수 있는 메소드를 만들 때에는 get과 set을 메소드명에 붙여서 제작을함

ex) private String njame ; // name 이라는 멤버변수
public void setName(String _name)
{
	name = _name;
}

public String getName()
{
	return name;
}

기능제공용 클래스
-> Entity Class(VO(Value Object), DTO(Data Transfer Object))
	- 순수 데이터를 표현하는 클래스

-> Control Class
	- 데이터를 운영하는 클래스


=======================

롤 캐릭터 키우기


추상화

#속성
레벨 - level
ad공격력 - adPower
ap공격력 - apPower
ad성장치 - adUp
ap성장치 - apUp
ad방어력 - adDf
ap방어력 - apDf
공격속도 attackSpeed
공격속도 성장치 - attckSpeedUp 
체력 - hp
마나 - mp
체력 증가 - hpUp
마나 증가 - mpUp
재사용시간 - delay
경험치 - exp
아이템 - String[] item = new String[];

#기능
메뉴 선택 - 1. 파밍, 2. 상점 방문, 3. 라인전연습 4. 아이템 보유상황(골드도)
6. 전적확인

우물 - 우물가면 hp랑 mp가 회복된다.
파밍 - 미니언 n마리를 죽였습니다 - m 골드를 획득했습니다.(4번 메뉴로 들어갔을때만)(렌덤)
상점방문 - 아이템 리스트 보여주기. 아이템 구매하기. 구매하면 String에 보여주기
라인전 연습 - 
라인전 메뉴
1. 평타공격
2. 스킬공격(
3. 회피( 렌덤으로)










