@ ArrayList
-> ArrayList 는 기존 배열과는 사용법이 조금 다음
	( 배열은 크기가 정해져 있으나  ArrayList 는 크기가 정해져 있지 않음)

ex)
ArrayList<String> al = new ArrayList<String>();
		al.add("Hello");
		al.add("World");
		al.add("MSLove");
		al.add("MSHate");
		
		System.out.println(al.get(0));
		
		for(String str : al)
		{
			System.out.println(str);
		}
		


-> 이렇듯 사용하는 방법을 보면 데이터를 추가할때 add 메소드를 통해 데이터를 하나하나 추가 할 수있음
-> 데이터의 개수는 size메소드를 통해 알아 올수있음
-> get 메소드를 통해 데이터를 꺼내올 수 있음


## add 메소드 ##
-> 데이터 추가 메소드

## size 메소드 ##
-> 저장된 데이터의 개수를 담고 있는 메소드

## get 메소드 ##
-> 저장된 데이터를 꺼내오는 메소드.

## remove 메소드 ##
-> 저장된 데이터를 삭제함 (인자값으로 index 번호를 넘겨주면 됨)

## clear 메소드 ##
-> 저장된 모든 데이터 삭제.


## set메소드 ##
-> 저장된 데이터를 교체
-> set(index,Element)
	* Element 는 객체



@ 정렬(sort)
-> 우리가 Collection을 쓰는 이유 중의 하나가 정렬을 쉽게 하기 위한 것도 있음
-> ArrayList 는 자동 정렬 메소드인 sort를 지원함
-> 이때 Collection.sort(객체명) 메소드를 사용 하여 정렬함
	- Collections.sort 메소드는 static 메소드