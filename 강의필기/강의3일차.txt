

강의 3 ( 2018.02.02 (금) )

@ Scanner Class
-> 사용자로 부터 입력되는 정수, 실수, 문자열, 문자를 처리하는 클래스
-> java.util 패키지 안에 포함되어 있음
	- import java.util.Scanner;

@Scanner 사용하기
-> Scanner sc = new Scanner(System.in);

키보드로 입력받기

정수값 입력받기 : sc.nextInt();
실수값 입력받기 : sc.nextFloat();, 혹은 sc.nextDouble();
문자열 입력받기 : sc.next();,혹은 sc.nextLine();

sc,next()는 띄어쓰기 입력 불가.
sc.nextLine()은 띄어쓰기 입력 가능.

	nextLine() 메소드를 사용할때에는 버퍼 문제를 해결 해야함.

문자 입력 받기 : sc.next().charAt(0);


@상수

-> 상수에는 리터럴 상수와 심볼릭 상수가 있음

리터럴 상수 
-> 이름이 없는 상수
-> 변수에 대입되는 갑 자체를 의미함

ex) 3,3.14, 'a', "Hello";

심볼릭 상수
-> 이름이 없이는상수
-> 변수에 값을 대입후 해당 변수를 상수화 시킴
-> final 이라는  keyword 를 사용하여 심볼릭 상수를 만듦
-> 상수로 사용되는 이름은 대문자로 사용하기로 약속되어있음.
(상수선언 명명 규칙)


@ 컴퓨터의 동작 원칙

1. 반드시 같은 데이터 타입 간에 연산을 해야 함
2. 반드시 동일한 데이터 타입의 값을 동일 한 데이터 타입 변수에 대입해야함
3. 결과값 또한 동일한 데이터 타입의 값을 가짐

*위에 기본 원칙이 지켜지지 않을 경우 프로그래밍 언어에서는 사용자에 의해 명시적으로 '형변환'을 해주거나 혹은 암묵적으로 '형변환'을 진행함


@ 자동 형변환
-> 연산시 컴파일러가 자동으로 형이 변환되는 것을 의미함
-> 작은 데이터형에서 큰데이터형과의 연산은 큰 데이터 형으로 자동 형변환 함


byte-> short -> int -> long -> float -> double
       char


@ 자동 형변환 되는 경우

1. 작은것에서 큰것으로 대입 될때
	byte b = 100;
	int i = b;

2. 자료형이 다른 값이 게산 될때
	int a = 3;
	couble b = 5.7;
	System.out.println(a+b);


캐스팅 연산자(강제 형변환 연산자)
ex(short) 데이터

@강제 형변환( 캐스팅 연산자)
-> 자료형을 강제적으로 형 변환 하는 연산자
-> 데이터가 큰 자료형에서 작은 자료형으로 변경시 데이터 손실이 발생할 수 있으므로
사용시 유의 해야 함
-> 사용방법은 형변환을 해얗하는 데이터 앞에 ()를 사용하여 작성함
	- ex) (int)3.14; -> 3.14를 정수로 강제 변환함( 3으로 바뀜)


-> 정수와 정수 연산 결과는 정수 결과가 나옴
 결과가 실수값으로 나와야 하는 경우에는
연산하는 두개의 값중하나는 실수로 되어 있어야함.

@출력 메소드
1. System.out.println()
-> Console 화면에 데이터를 출력후 자동 줄 개행을 해주는 메소드

2. System.out.print()
-> Console 화면에 데이터를 출력( 자동 줄개행 X)

3. System.out.printf()
-> 특정 포맨 형식을 사용하여 그 형식에 맞게 값을 출력 해줌
-> 자동 줄개행을 하지 않음(개행시 특수문자를 사용함)


포맷형신

정수표현 
%d : 10진수 %o : 8진수 %x: 16진수

실수표현
%f : 실수( 소수점 아래 6자리)
%e : 지수 표현식 
%g : %e와 %f중 더 짧은 표현으로 사용

문자 / 문자열
%c : 문자 ., %s: 문자열

불린형
%b : 논리형(true, false)


너비 및 정렬
%5d 5칸을 확보하고, 우측 정렬
%-5d 5칸을 확보하고, 좌측정렬
%.2f 소수점을 2자리까지 표기.


@특수문자( excape 문자)
 
tabae		\t	정해진 공간만큼 띄어쓰기
new line 	\n	출력하고 다음라인으로 옮김
역슬래쉬	\\	특수문자(\)를 출력
작은따옴표	\'	특수문자(')를 출력
큰따옴표	\"	특수문자(")를 출력
유니코드	\u	유니코드 표시할때 사용.


@ 연산자
-> 자바에서는 다양한 연산자를 사용하여 다양한 프로그램을 만들수 있음


@ 산술 연산자
+	:	더하기
-	:	빼기
*	:	곱하기
/	:	나누기
%	:	나머지

ex)


int a = 10;
int b = 3;

System.out.println("a+b = " + (a+b));
System.out.println("a-b = " + (a-b));
System.out.println("a*b = " + (a*b));
System.out.println("a/b = " + (a/b));
System.out.println("a%b = " + (a%b));



@ 대입연산자
=	오른쪽 값을 왼쪽 공간(변수)에 대입
+=	왼쪽과 오른쪽 값을 더한 결과값을 왼쪽 공간(변수)에 대입
-=	왼쪽과 오른쪽 값을 뺀 결과값을 왼쪽 공간(변수)에 대입
*=	왼쪽과 오른쪽 값을 곱한 결과값을 왼쪽 공간(변수)에 대입
/=	왼쪽과 오른쪽 값을 나눈 결과값을 왼쪽 공간(변수)에 대입
%=	왼쪽과 오른쪽 값을 나눈 결과값(나머지) 를 왼쪽 공간(변수)에 대입


예제)

	int a = 10;
	int b = 3;
	int c = 6;

	a += 3;
	b *= 4;
	c %= 5;

@증가 감소연산자
-> 값을 하나 증가, 하나 감소 시키는 경우에 사용되는 단항 연산자

전치(전위) 연산
-> 변수에 저장된 값을 증/감 시킨 후 연산

후치(후위) 연산
-> 연산 수행후 변수에 저장된 값을 증/감 시킨다.

a++	연산을 진행한 후 값을 1 증가 ( 선 연산, 후 증가)
++a	값을 1 증가 시킨후 연산을 진행( 선 증가, 후 연산)
b--	연산을 진행한 후 값을 1 감소( 선 연산, 후감소)
--b	값을 1 감소 시킨후, 연산을 진행( 선 감소, 후 연산)




@관계 연산자(비교 연산자)
-> 두개의 변수 관계를 따지는 연산자, 다른 말로는 비교 연산자 라고 함
-> 관계 연산자는 조건을 만족하면 ,true,
	만족하지 못하면 false 값을 리턴(반환)

<	ex) a<b	 	a가 b보다 작은가?
>	ex) a>b		a가 b보다 큰가?
==	ex) a==b	a가 b와 같은가?
!-	ex) a!=b	a가 b가 다른가?
<=	ex) a<=b	a가 b보다 작거나 같은가?
>=	ex) a>=b	a가 b보다 크거나 같은가?
	

@ 논리 연산자
-> 여러 조건을 동시에 검사할 때 주로 사용하는 연산자
-> and(그리고), or(또는), not(그러나) 를 표현하는 연산자

&&	 피연산자가 모두 참이면 true 를 반환( and의 의미)
||	피련산자 중 하나라도 참이면 true를 반환( or의 의미)
!	피연산자가 true면 false를 false면 true 를 반환(not 의 의미)


@ 비트 연산자
-> 2진수로 변환하여 비트 단위의 연산을 수행하는 연산자
-> 정수형 타입에서만 사용 가능함
-> 주로 하드웨어를 직접 제어하거나 한글등을 처리할때 사요함
&	비트단위 AND연산자
|	비트단위 OR 연산자
^	비트단위 XOR연산자
~	비트단위 NOT연산자
<<	왼쪽으로 비트 이동 연산자( 왼쪽 쉬프트 연산자)
>>	오른쪽으로 비트 이동 연산자( 오른쪽 쉬프르 연산자)



### & 연산자(AND)
-> 두개의 비트가 1이면 결과는 1, 두개중 1개라도 0 이면 결과는 0


### | 연산자(OR)
-> 둘중에 하나라도 1이면 결과는 1, 둘다 0 이면 결과는 0

### ^ 연산자(XOR)
-> 두개의 비트가 다르면 1, 같으면 0
-> 영문자의 대소문자를 변환할 경우에 사용하기도 함



### ~연산자(NOT)
-> 비트가 0이면 1로 변환, 1이면 0으로 변환



###  << 연산자
-> 비트를 왼쪽으로 이동

###  >> 연산자
-> 비트를 오른쪽으로 이동