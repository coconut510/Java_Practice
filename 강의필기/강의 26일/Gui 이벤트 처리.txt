
@ 이벤트( event)
-> 사용자가 마우스로 버튼을 클릭하거나 키보드를 누르는 등 어떠한 데이터가
도착하면 발생함
-> 이벤트가 발생하면 이벤트 객체가 자동 생성됨
-> 이벤트 객체는 이벤트에 대한 여러가 지 정보를 가지고 있음
-> 발생된 이벤트를 처리하는 객체를 이벤트 리스너(event Listener)라고 부름


## 이벤트는 3가지가 필요함 ##

1. 이벤트의 소스(출발지) - 소스코드 X
 -> 이벤트가 발생한 대상체
	ex) 버튼을 눌렀으면 버튼이 소스
	ex) 윈도우를 드래그 하면 윈도우가 소스

2. 이벤트의 리스너
-> 이벤트가 발생하면 그것을 들어 줄 수 있는 개체가 필요함
-> 이벤트 발생시 감지하는 것을 리스너 라고함(청취자 혹은 감지잦)
-> 감지에는 종류가 다양함(클릭, 키보드, 드래그 등등)
-> 단 리스너는 들어주는 역할일뿐 일을 처리할 순 없음
	- 이벤트에 따른 처리를 하기 위하여 리스너는 이벤트를 감지하면 핸들러에게 감

3. 이벤트의 핸들러
-> 이벤트가 발생했을때 이벤트 종류에[ 따라서 반응및 조치를 가지고 있는것을 핸들러 라고 함
-> 리스너가 핸들러에게 올때 " 이벤트가 발생했음" 과 동시에 다양한 정보를
같이 가지고 옴(이벤트 종류 및 이벤트의 소스 등등...)


@ 
1. 독립적인 클래스
2. 내부 클래스
3. 내부 메소드
4. 무명 클래스

1. 독립적인 클래스
-> 외부에 별도의 클래스를 작성하여 사용하는 방법.
public class MyListener implements ActionListener{
	private JButton button = null;
	private JButton button2 = null;
	public MyListener() {}
	public MyListener(JButton button, JButton button2)
	{
		this.button = button;
		this.button2 = button2;
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		JButton sourceButton = (JButton) e.getSource();
		if( sourceButton==button) 
		{
			JOptionPane.showMessageDialog(null,"알림창");
		}
		else  if( sourceButton==button2) 
		{
			JOptionPane.showMessageDialog(null,"누르지마세요");
		}
	}
}

2. 내부 클래스
-> 독립적인 클래스 방법으로는 버튼을 클릭하면 MyFrame에 있는 멤버 필드에 접근하는것이 어려움
-> 그래서 일반적으로 내부 클래스를 만들어 사용하기도 함
-> 내부 클래스는 자신을 포함하는 클래스의 멤버변수들을 자유롭게 사용할  수 있음.

public class EventTest extends JFrame 
{
	private JButton button= new JButton("눌러보세요.");
	private JButton button2 = new JButton("누르지 마세요.");
	
	class MyListener2 implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent e) {
			if(e.getSource()==button)
			{
				JOptionPane.showMessageDialog(null,"알림창");
			}
			else if(e.getSource()==button2)
			{
				JOptionPane.showMessageDialog(null,"누르지말리니깐..");
			}
		}		
	}
	
	public void comInit()
	{
		this.add(button);
		this.add(button2);
		button.addActionListener(new MyListener2());
		button2.addActionListener(new MyListener2());
	}
	
	public EventTest()
	{
		super("Event");
		this.setLayout(new FlowLayout());
		this.setSize(450,300);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.comInit();
		this.setVisible(true);
	}
		
}

3. 내부 메소드
-> 해당클래스 안에 actionPerformed 메소드를 생성하여 사용하는 방법
-> 프레임 클래스가 ActionlListener 인터페이스를 상속받아 자신이 Frame이자
이벤트 리스너가 된다는 의미.

	@Override
	public void actionPerformed(ActionEvent e) {		
		if(e.getSource()==ls)
		{
			cardNum = 1;
		}  
		else if(e.getSource()==lts)
		{
			if(	cardNum>1)	cardNum -= 1;
		}
		else if(e.getSource()==rts)
		{
			if(	cardNum<7)	cardNum += 1;
		}
		else if(e.getSource()==rs)
		{
			cardNum = 7;
		}
		else if(e.getSource()==exit)
		{
			System.exit(0);
		}
		// 카드를 담을수 있는 레이아웃은 CardLayout
		((CardLayout) centerPanel.getLayout()).show(centerPanel, Integer.toString(cardNum));
	}

4. 무명 클래스
-> 이벤트 리스터 클래스를 정의할때, 가장 많이 사용되는 방법 중 하나
-> 무명 클래스는 말 그대로 이름이 없는 클래스를 작성하여 한번만 하용하는 것
-> 처음에는 어려워 보일수 있으나 익숙해지면 코드를 읽기 쉽게 만듦

button.addActionListener(new ActionListener()
	{
		@Override
		public void actionPerformed(ActionEvent e) {
			if(e.getSource()==button)
			{
				JOptionPane.showMessageDialog(null,"알림창");
			}
		}
	});
button2.addActionListener(new ActionListener()
	{
		@Override
		public void actionPerformed(ActionEvent e) {
			if(e.getSource()==button2)
			{
				JOptionPane.showMessageDialog(null,"누르지 마세욧!");
			}
		}
	});

