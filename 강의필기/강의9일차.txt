@자바의 메모리 구조

Stack	-> 일반변수나 레퍼런스 변수는 Stack에 생성
Heap	-> New 연산자 사용시 Heap 메모리에 생성(Heap은 동적 메모리)
Static	-> 정적(static)변수나 메소드가 생성.


문자열은 Heap공간에 만들어진다.

자바에서는 String Pool이 있어서,

메모리상에 동일한 변수값을 가지고 있다면 해당 변수값을 새로운 변수에도 대입해줄수 있다.

String.hashCode()를보면 같은 주소를 보여준다.

String Pool 은 Heap 공간에 있다.

@복사


-> 값을 복사 하다 라는 의미

@ 배열 복사
얕은 복사 : 참조하고 있는 주소값만을 복사하여 사용( 같은 데이터를 참조 하는형태)
깊은 복사 : 새로운 공간을 생성하여 기존 데이터값을 복사하여 넣음(새로운 데이터 생성)


	*깊은복사를 하려면 System.arraycopy 메소드 혹은 clone메소드를 사용해야함.


ex) System.arraycopy(src레퍼런스, src 인덱스 ,dest 레퍼런스 , dest 인덱스 , 길이);

src 레퍼런스 : 복사할 대상 레퍼런스
src 인덱스 : 복사할 대상의 시작 인덱스 번호
dest 레퍼런스 : 저장될 목적지 레퍼런스
dest 인덱스 : 저장될 대상의 시작 인덱스 번호.
길이 : 어디까지 복사할지. 개수

@2차원 배열
-> 2차원 배열은 인덱스를 2개 사용하여 행과 열을 표현하는 것

ex) int [][]arr = new int[3][4];

int[][] arr = new int[행][열];
	*가로가 행, 세로가 열.


@2차원 배열의 초기화

int[][] arr = {1,2,3,4,5,6,7,8};// 2x4 4x2인지 모르기 때문에 불가능 함.

int[][] arr = {{1,2,3,4,},{5,6,7,8}};



@2차원 배열의 공간 생성
intp[p[ arr = new int[3][4];   // 3개의 행과 4개의 열이 만들어짐.