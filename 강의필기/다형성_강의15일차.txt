@ 다형성
-> 객체 지향 프로그래밍의 3대 특징 중 하나
-> 상속을 이용한 기술임
-> 상속관계에 있는 부모, 자식 클래스 간에 부모 타입은 모든 후손 타입을 받아 줄수있음
-> 부모 클래스 타입의 레퍼런스가 후손 객체의 주소를 저장할 수 있다는 뜻이 됨
	- 후손 객체 안에 부모 멤버가 포함되어 있기 때문에 가능함
-> 한가지가 여러가지 형태를 가지고 있는것을 다형성이라고 표현함
-> 부모 레퍼런스는 자식 객체의 주소를 저장할 수 있음
	* 주의할점 : 부모 레퍼런스를 통해 객체의 접근시 부모가 가지고 있는
	메소드만 사용할 수 있음
	(만약 부모 레퍼런스 이지만 자식의 메소드를 호출하려면 다운 캐스팅을 해야함)

@ 메소드 오버라이딩
-> 부모 클래스의 메소드를 상속받지 않고 자신이 재정의 할때 사용하는 것

public class Animal
{
	public void crying()
	{
		System.out.println("크와앙~");
	}
}

public class Tiger extends Animal
{
	public void crying()
	{
		System.out.println("어흥~!!");	
	}
}

public class TestMain
{
	public static void main(String[] args)
	{
		Tiger t = new Tiger();
		t.howling();// 어떠한 결과가 출력 될까?
	}
	
}


@ 애너테이션 (어노테이션) - Java Annotation
-> 애너테이션은 자바 소스코드에 추가하여 사용할 수 있는 메타 데이터의 일종
-> '@' 기호를 붙여 사용하며 가상 머신에게 해당 문법에 대해 알려줌
-> 메소드 오버라이딩시에는 @Overried 를 명시하여 오버라이드 된 메소드임을
JVM에게 알려줌( 생략 하여도 자동으로 @Override가 명시됨)


@ abstract (추상화)
-> abstract 라는 키워드는 추상이라는 의미를 가지고 있는 키워드임
-> 메소드를 abstract로 만들경우 부모 클래스는 자신을 상속받는 자식들에게
해당 메소드를 강제적으로 생성할가는 의미가 됨
	( 부모는 기능이 없는 메소드를 만든것이고 해당 기능을 가진 메소드를
	자신을 상속 받은 자식들이 오버라이딩해서 정의하라는 의미)
-> abstract 메소드를 포함하고 있는 클래스는 불완전한 클래스가 됨
	(기능이 없는 메소드를 가지고 있는 클래스가 객체화 되면 안됨)
-> 그렇기 때문에 abstract 메소드를 포함하고 있는 클래스는 객체화 할수 없도록
	클래스 명 앞에 abstract 키워드를 붙여서 추상클래스로 선언 해야 함
	(추상 클래스는 객체화 할수없는 클래스 라는것을 의미함)


abstract public class Animal
{
	public abstract void howling();
	// howling 메소드는 추상 메소드가 됨(몸체 (기능) 이 없는 메소드)
	// 즉, 자신을 상속 받은 자식 클래스에게 해당 메소드를
	// 강제적으로 오버라이딩(재정의) 해서 사용하라는 뜻을 말함
}


-> Animal 을 상속받은 클래스들은 무조건 howling 메소드를 오버라이딩 해야함
