@ 멀티 스레드 작성하기
1. 멀티 스레드로 작동시킬 클래스는 반드시 java.lang.Thread 클래스를 상속받아야함

ex) 
class 클래스명 extends Thread
{

}

-> 만약 다른 클래스를 상속 받은 경우라면 Runnable 인터페이스를 상속받으면 됨

class 클래스명 implements Runnable
{

}

* 자바에서는 extends는 1개만 사용할 수 있으므로 interface 상속을 꼭 알아야함

2. 상속 처리후  run() 메소드를 오버라이딩 해서 작동 시킬 코드를 작성함
-> Thread를 상속받은 클래스를 run 클래스에 코드를 작성해야 Thread처리가 됨.


@ 멀티 스레딩 프로그램 실행 방법
1. Thread or Runnable 을 상속받아 만들어진 클래스들에 대한 객체를 생성
	=> 동시 실행을 원하는 클래스 모두 객체 생성함
	
	ex) 
	ThreadClass1 t1 = new ThreadClass1();
	ThreadClass2 t2 = new ThreadClass2();

2. Thread 를 상속받은 클래스는 Thread 클래스에 대한 객체를 생성하여 담을 수 있음

	Thread a = t1;
	Thread b = t2;

	=> 다형성으로 가능함

만약, Runnable 인터페이스를 상속받은 클래스는 아래와 같은 코드로 할 수 있음

	Thread a = new Thread(t1);
	Thread b = new Thread(t2);


3. 생성된 스레드 객체를 실행시킴
	=> start() 메소드를 사용하여 실행시킴

	a.start();
	b.start();

	=> start()메소드는 Thread클래스 안에 내부적으로 만들어져 있으며
	start 메소드가 run 메소드를 호출하여 작동 시킴.

@ 스레드 스케줄링
-> 여러개의 스레드가 동시에 실행을 요청할 대, CPU가 실행의 순서를 정함
	(기본값 : 5 / 1~10) '1'이 낮고 '10'이 우선순위가 높음

-> 스레드 실행에 대한 우선 순위를 정할 수 있음
	스레드 레퍼런스.setpriority(우선순위값);

-> 우선순위값 : Thread.MAX_PRIORITY 	// 최대값(10)
		Thread.NORM_PRIORITY	// 기본값(5)
		Thread.MIN_PRIORITY	// 최소값(1)

-> 우선순위 확인
	int 변수 = 스레드레퍼런스.getPriority();

-> 우선순위 설정
	Thread r = new 스레드상속클래스생성자();
	t.setPriority(7);		//1~10 사이의 정수 사용이 가능함.


@ 동기화 (synchronization)
-> 싱글스레드 프로세스의 경우 프로세스 내에서 단 하나의 스레드만 작업하기 때문에
프로세스의 자원을 가지고 작업하는데 별 문제가 없지만, 멀티 스레드 환경에서는
여러 스레드가 같은 자원을 공유해서 작업하기 때문에 서로의 작업에 영향을 주게됨


-> 여러 스레드가 하나의 데이터 혹은 영역을 공유하게 될 경우
	스레드 간섭과 메모리 일관성 오류가 발생함

-> 스레드 간섭 : 하나의 스레드가 값을 변경하려 할때 다른 스레드가 끼어드는 경우
-> 메모리 일관성 오류: 공유된 데이터 값이 일치 하지 않는 경우
-> 해결 방법 : 동기화 처리
	- 스레드들이 공유하는 데이터를 한 스레드가 사용하는 동안
	다른 스레드는 접근하지 못하게 블로킹 처리 하는 방법.

	- 공유하는 데이터를 사용하는 메소드의 반환 자료형 앞에
	synchronized 키워드를 추가함.
	- 또는 소스상의 공유영역을 synchronized(공유 데이터 필드) {} 으로 묶음


