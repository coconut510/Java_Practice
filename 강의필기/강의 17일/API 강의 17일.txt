
@ API
-> Application Programming Interface의 약자
-> 프로그래밍을 할때 어떠한 특정 기능을 처리할 수 있도록 만들어 놓은
클래스나 메소드(함수)의 집합(라이브러리)
-> 위노두 API, 자바 API, 웹 API 등 다양하게 존재함
	* 윈도우 API, : 윈도우 운영체제를 프로그밍 할 수있도록
	미리 여러가지 기능을 정의 해놓은 라이브러리

	*자바 API : 자바 언어를 사용하여 기능을 구현 할수 있도록
	미리 여러가지 기능을 정의 해놓은 라이브러리

	* 웹 API : 웹에서 특정 기능들을 구현 할 수 있도록
	미리 여러가지 기능을 정의 해놓은  API

-> 실제 Java 라는 언어는 다양한 API를 가지고 있고, 그러한 API 들을 사용하여 
프로그래밍 하는 언어라고 볼수있음.


@ String API
-> 문자열을 사용하는 API는 다양함.
-> 그중 우리는 String, StringBuffer, StringBuilder 만 다루도록 하겠음

@String 클래스
-> 문자열 값을 수정 하지 못하는 immutable(불변)임
-> 수정시 수정된 문자열이 새로 할당되어 새 주소를 넘김
-> 문자열을 자주 수정시 메모리 낭비가 심함
@ String Buffer 클래스
-> 문자열 값을 수정할수있는 mutable(가변) 임
-> 문자열을 자주 변경시 String 보다 유용함
-> 기존 문자열에 수정되어 적용됨(수정, 삭제 등)
-> 기본 16문자 크기로 지정된 버퍼를 이용하며, 수정시 크기가 증가 될수있음
	- 문자열을 넣은뒤에- 16개의 버퍼 공간이 생김
	(문자열을 16글자까지 추가하여도 공간이 재할당 되지 않음)
	- 버퍼 공간이 넘치게 되면( 기존길이 + 버퍼길이 + 1)*2 만킁의 공간이 할당됨
-> 쓰레드 safe 기능을 제공함(성능저하 요인)
	* 쓰레드 safe 기능은 동시에 한 자원에 접근하지 못하게 잠그는 기능

## StringBuffer의 메소드 ##
-> capacity 메소드 : 실제 할당된 공간의 크기를 알수잇음
-> length 메소드 : 실제 문자열 길이를 알수있음
-> reverse 메소드 : 저장된 문자열을 거꾸로 재배치함 (12345 -> 54321)
-> insert 메소드 : 문자열의 특정 위치에 문자열을 추가
-> append 메소드 : 문자열 끝에 문자열을 추가
-> delete 메소드 : 문자열의 일부분을 삭제
-> replace 메소드 : 문자열의 일부분을 다른 문자열로 대치


@ StringBuilder 클래스
-> StringBuffer와 같음
-> 단, 쓰레드 safe 기능을 제공하지 않음




@ StringTokenizer 클래스
-> 문자열을 분석하여 토큰ㅇ드로 분리시켜줌
-> 파일에 저장된 텍스트를 처리하는 경웨 유용하게 쓰임
-. 생성시 전달 받은 문자열을 구분자로 나누어 각 토큰에 저장함

## 주요 메소드 ##
coutTokens 메소드 : 토큰을 꺼내지 않고 남아있는 토큰의 수를 확인 함
hasMoreTokens 메소드 : 남아 있는 토큰이 있는지 확인(true, false)
nextToken  메소드 : 토큰을 하나씩 꺼내옴.


@ Math Class
-> 자바 API 에서 제공하는 기본 Class 중 하나
-> 수학에서 자주 사용하는 상수들과 메소드들을 구현해 놓은 클래스
-> Math 클래스의 모든 메소드는  클래스 메소드(staticf method) 이므로,
객체를 생성하지 않고도 바로 사용이 가능 함



