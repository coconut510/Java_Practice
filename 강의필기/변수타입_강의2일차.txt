

강의2 ( 2018.02.01 (목) )

@프로젝트 
-> 이클립스의 프로젝트 의미는 하나의 큰 작업 이라고 보면됨
-> 하나의 작품
-> 여러개의 패키지가 존재하는 공간
*프로젝트 명은 낙타 표기법
(소문자로 시작, 구분마다 첫글자는 대문자)

@패키지
-> 패키지는 프로젝트 안에 존재하는 하나의 디렉토리
-> 패키지(3디렉토리) 안에 다양한 클래스 파일이 존재함
* 패키지명은 모두 소문자

@클래스
-> 실제 소스코드가 들어있는 파일
* 클래스명은 첫글자가 대문자 이며 구분마다 첫글자는 대문자
-> 파스칼 표기법

@자바의 이름 표기법
1. 카멜 표기법( 낙타 표기법)
-> 카멜 표기법은 자바에서 시작 된 표기법
-> 변수명 혹은 프로젝트 명을 작성할 시 단어와 단어가 만날때 뒤에 있는 단어의 첫 글자를 대문자로 표기하는 방법
-> 이 방법은 낙타의 등처럼 한 글자가 대문자로 표기되기 때문에 카멜 표기법으로 부르게됨

ex)프로젝트 명
khJavaProject

ex)변수명
-> int heroHp;
-> string myName;

추가적으로 메소드 이름을 작성시에도 카멜 표기법을 적용함
ex)메소드명
public String createMyName(){}

2. 파스칼 표기법
-> 이방식은 카멜 표기법과 유사하지만 더욱 더 단순한 표기법
-> 표기 방법은 모든 단어의 첫 글자만을 대문자로 표현하고, 나머지는 소문자로 표기함
( 구분 마다는 첫글자가 대문자)

ex) class 명
-> class HelloWorld



@ 실행용 클래스
-> 해당 프로그램을 실행하기 위한 용도의 클래스
-> 즉, 기능 제공용 클래스를 사용하기 위한 클래스
-> main 메소드가 포함되어 있는 클래스

@ 기능 제공용 클래스
-> 오직 기능을 제공하기 위한 클래스
-> main 메소드가 포함되어 있지 않은 클래스

@숫자와 문자
-> 자바와 같은 프로그래밍에서는 숫자와 문자는 무엇보다도 많이 사용하게 됨
-> 그러므로 우리는 자바에서 어떻게 숫자를 표현하고 문자를 표현하는지 
기본적으로 숙지하고 있어야 함.

자바에서 사용하는 데이터 종류
정수형 : 소수점을 포함하지 않은수 ex) 10,2,3
실수형 : 소수점을 포함한 수 ex) 1.0, 3.14
문자형 : ''안에 표현한 문자  ex) 'A' 싱글쿼테이션
문자열 : ""안에 표현한 문자 ex)"Hello Java" 더블 쿼테이션

* 문자는 1 글자만 표기할 수 있고, 문자열은 1글자 이상을 표기 할수 있음
* 문자는 사실상 하나의 숫자 값이라고 보면 됨


@변수
->'변하다'의 변과 '데이터'를 의미하는 수
-> 즉, 변하는 데이터를 뜻함
-> 변수 자체의 의미는 볁하는 데이터를 뜻하지만 프로그래밍적 의미로 보면
데이터를 담을수있는 공간으로 보면 됨
- 해당 공간의 담긴 값이 소스코드에 따라 변할수있기 때문에 변수라고 부름

#변수라는 공간은 데이터를 담는 다는의미로 볼수 있는데, 만약 하나의 변수가 존재할때 그 공간은
어떤한 데이터를 담는 공간일까?

-> 변수를 만들기 위해서는 선행으로 자료형(데이터형)을 알아야 함

@ 기본 자료형

논리형 : 하나의 true, false를 표현하는 데이터형
	- boolean(1Byte) : true 혹은 false 만 표현

정수형 : 하나의 정수값을 표현하는 데이터형(기본 int형)
	-byte(1Byte) : -128~127
	- short(2Byte) : -32768~32767
 	- int(4Byte) : -2147483648~ 2147483647
	- long(8Byte) : -2^63~ 2^3-1

실수형 : 하나의 실수값을 표현하는 데이터형( 기본 double형)
	- float( 4Byte)
	- double(8Byte)

문자형 : 한개의 문자를 저장하는데 사용
	-char (2Byte) : 0~65,535

문자열형 : 하나의 문자열을 저장하는데 사용
	- String : String 형은 문자열을 저장하기 위해 자바에서 만든 특수한 형태의 자료형

@ 변수 선언
-> 변수를 선언하기 위해서는 3개를 작성해야함
- 자료형, 변수명, ;
ex) int a;

논리형 변수선언
boolean bool ;// boolean, 데이터 타입을 가지는 bool 이라는 변수

문자형 변수 선언
char chl;  	// char 데이터 타입을 가지는 ch라는 변수

정수형 변수 선언
byte bnum;// byte 데이터 타입을 가지는 bnum이라는 변수
short snum;// short 데이터 타입을 가지는 snum이라는 변수
int i num;// int 데이터 타입을 가지는 inum이라는 변수
long lnum;// long 데이터 타입을 가지는 lnum이라는 변수

실수형 변수 선언
float fnum;// float 데이터 타입을 가지는 fnum이라는 변수
double dnum; // double 데이터 타입을 가지는 dnum이라는 변수

문자열 변수 선언
String str; // String 데이터 타입을 가지는 str이라는 변수

@변수 이름 명명 규칙(필수사항)

1. 대소문자가 구분되며 길이 제한이 없음
2. 예약어를 사용하면 안됨
3. 숫자로 시작하면 안됨
 - 숫자는 사용해도 되지만 시작은 안된다는 뜻
4. 특수문자는 _(언더바) 와 $ 만 허용함
- sh@rp은 안되지만 $harp는 가능함

@변수 이름 명명 규칙2(권장사항)
1. 여러 단어 이름은 단어의 첫글작를 대문자로함
- ageOfVampire, userName(낙타 표기법)
2. 한글이름은 지양
- 한글 이름 변수는 가능하지만 쓰지 않기를 권장함
3. 변수명은 의미있는 이름으로 작성을 권장함
- 변수명만 보고도 데이터를 예측할수있도록 설정


@ 변수 초기화
-> 생성된 변수의 값을 대입
1. 생성과 동시에 값 대입(초기화)
int age = 20;

2. 생성후 값 대입
int age;
age = 20;
-> 주의할점은 int age;로 선언후 사용할때 int age = 20;을 하면 안됨
age = 20; 으로 해야함.

@입력받아서 변수에 대입하기.
-> Scanner 를 사용해야 함
-> Scanner 클래스는 java.util 패키지 안에 포함되어 있음.

