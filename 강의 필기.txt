강의 1( 2018.01.31 (수) )

데이터의 단위 
우리가 물체의 무게를 표현할때 g, kg,t 등을 사용하여 다양하게 표현하듯이 컴퓨터의 데이터 양의 따라 표현하는 단위가 있음

bit - 컴퓨터가 처리하는 최소단위(0 또는 1만 표현 가능)
Byte - 8bit를 1 Byte로 표현
Word - 2byte를 word로 표현
Dword - 4byte를  dword표현
Qword - 8byte를 qword표현

1024 Byte - 1KByte
1024 KByte - 1MByte
1024 MByte - 1GByte
1024 GByte - 1TByte

진법

2진수  - 2개의 숫자를 가지고 데이터를 표현하는 방법.
	0,1을 가지고 데이터를 표현함
8진수  - 8개의 숫자를 가지고 데이터를 표현하는 방법.
	0~7을 가지고 데이터를 표현함 ex) 0,1,2,3,4,5,6,7,10,11,12,13,14,15,16,17,20.....
10진수 - 10개의 숫자를 가지고 데이터를 표현하는 방법.
	0~9를 가지고 데이터를 표현함
16진수 - 16개의 숫자를 가지고 데이터를 표현하는 방법.
	0~F를 가지고 데이터를 표현함 ex)0,1,2,3...A,B,C,D,E,F,

1.실습

10진수 -. 2진수로 변환
110 ->1100100
30 ->11110
88 ->1011000
55 ->110111

10진수 - 8진수로 변환
106 -> 152 
 54 -> 66
 97 -> 141

10진수 -. 16진수로 변환

78 ->4E
44 ->2C
51 ->33
33 ->21
97 ->61



2.실습2

2진수 -> 10진수로 변환
1101111 -> 111
1101011 -> 107
0010100 -> 20
1001010 -> 74

8진수 - 10진수로 변환
133 ->91
71 -> 57
57 -> 47
144 -> 100

16진수 - 10진수로 변환
4F - 79
44 - 68
58 - 88
70 - 112
3F - 63
6A - 106


컴퓨터의 데이터 표현
1Byte = 8bit

10000000


자바란?
자바는 1995년 자바의 아버지라 불리는 제임스 고슬링과 그의 동료들이 함께 만든 프로그래밍 언어임
초기 자바는 전기밥통과 같은 가전제품을 제어하기 위한 언어로 고안했었음.
웹이 등장하면서 자바가 우베을 통해 엄청난 성공을 거두며 주류 언어로 자리 잡았고, 현재 국내에서는 정보 및 기업의 시스템 통합 프로젝트가 대부분 자바를 기준으로 이루어 지고 있음
최근에는 모바일 플랫폼인 안드로이드가 엄청난 성공을 거두면서 자바의 수요가 급증하고 있음.


프로그래밍
1. 프로그래밍 관련 용어
 - 프로그램: 컴퓨터를 작동시키기 위한 순차적으로 작성된 일련의 명령어들의 모음
- 프로그래밍: 프로그램을 만드는 행위, 프로그램 개발을 의미함
- 프로그래머 : 프로그램을 만드는 사람, 프로그램 개발자를 뜻함.
- 프로그래밍 언어: 프로그램을 작성하기 위해 사용되는 언어
=> 사람이 이해하기 쉬운 언어 고급 언어
-> 기계가 이해하기 쉬운 언어 저급 언어
- 소프트웨어 : 컴퓨터를 효율적으로 운영하기 위해 개발된 프로그램
2. 자바의 특징
- 객체 지향 언어
- 운영체제가 독립적
- 사용하기 쉬운언어(공부를 했을시 타 언어에 비해)
- 능률적이고 명확한 코드를 작성할 수 있게 해줌
- 잗적으로 메모리를 관리맣(Garbage Collection)



강의2 ( 2018.02.01 (목) )

@프로젝트 
-> 이클립스의 프로젝트 의미는 하나의 큰 작업 이라고 ㅗ면됨
->하나의 작품
-> 여러개의 패키지가 존재하는 공간
*프로젝트 명은 낙타 표기법
(소문자로 시작, 구분마다 첫글자는 대문자)

@패키지
-> 패키지는 프로젝트 안에 존재하는 하나의 디렉토리
-> 패키지(3디렉토리) 안에 다양한 클래스 파일이 존재함
* 패키지명은 모두 소문자

@클래스
-> 실제 소스코드가 들어있는 파일
* 클래스명은 첫글자가 대문자 이며 구분마다 첫글자는 대문자
-> 파스칼 표기법

@자바의 이름 표기법
1. 카멜 표기법( 낙타 표기법)
-> 카멜 표기법은 자바에서 시작 된 표기법
-> 변수명 혹은 프로젝트 명을 작성할 시 단어와 단어가 만날때 뒤에 있는 단어의 첫 글자를 대문자로 표기하는 방법
-> 이 방법은 낙타의 등처럼 한 글자가 대문자로 표기되기 때문에 카멜 표기법으로 부르게됨

ex)프로젝트 명
khJavaProject

ex)변수명
-> int heroHp;
-> string myName;

추가적으로 메소드 이름을 작성시에도 카멜 표기법을 적용함
ex)메소드명
public String createMyName(){}

2. 파스칼 표기법
-> 이방식은 카멜 표기법과 유사하지만 더욱 더 단순한 표기법
-> 표기 방법은 모든 단어의 첫 글자만을 대문자로 표현하고, 나머지는 소문자로 표기함
( 구분 마다는 첫글자가 대문자)

ex) class 명
-> class HelloWorld



@ 실행용 클래스
-> 해당 프로그램을 실행하기 위한 용도의 클래스
-> 즉, 기능 제공용 클래스를 사용하기 위한 클래스
-> main 메소드가 포함되어 있는 클래스

@ 기능 제공용 클래스
-> 오직 기능을 제공하기 위한 클래스
-> main 메소드가 포함되어 있지 않은 클래스

@숫자와 문자
-> 자바와 같은 프로그래밍에서는 숫자와 문자는 무엇보다도 많이 사용하게 됨
-> 그러므로 우리는 자바에서 어떻게 숫자를 표현하고 문자를 표현하는지 
기본적으로 숙지하고 있어야 함.

자바에서 사용하는 데이터 종류
정수형 : 소수점을 포함하지 않은수 ex) 10,2,3
실수형 : 소수점을 포함한 수 ex) 1.0, 3.14
문자형 : ''안에 표현한 문자  ex) 'A' 싱글쿼테이션
문자열 : ""안에 표현한 문자 ex)"Hello Java" 더블 쿼테이션

* 문자는 1 글자만 표기할 수 있고, 문자열은 1글자 이상을 표기 할수 있음
* 문자는 사실상 하나의 숫자 값이라고 보면 됨


@변수
->'변하다'의 변과 '데이터'를 의미하는 수
-> 즉, 변하는 데이터를 뜻함
-> 변수 자체의 의미는 볁하는 데이터를 뜻하지만 프로그래밍적 의미로 보면
데이터를 담을수있는 공간으로 보면 됨
- 해당 공간의 담긴 값이 소스코드에 따라 변할수있기 때문에 변수라고 부름

#변수라는 공간은 데이터를 담는 다는의미로 볼수 있는데, 만약 하나의 변수가 존재할때 그 공간은
어떤한 데이터를 담는 공간일까?

-> 변수를 만들기 위해서는 선행으로 자료형(데이터형)을 알아야 함

@ 기본 자료형

논리형 : 하나의 true, false를 표현하는 데이터형
	- boolean(1Byte) : true 혹은 false 만 표현

정수형 : 하나의 정수값을 표현하는 데이터형(기본 int형)
	-byte(1Byte) : -128~127
	- short(2Byte) : -32768~32767
 	- int(4Byte) : -2147483648~ 2147483647
	- long(8Byte) : -2^63~ 2^3-1

실수형 : 하나의 실수값을 표현하는 데이터형( 기본 double형)
	- float( 4Byte)
	- double(8Byte)

문자형 : 한개의 문자를 저장하는데 사용
	-char (2Byte) : 0~65,535

문자열형 : 하나의 문자열을 저장하는데 사용
	- String : String 형은 문자열을 저장하기 위해 자바에서 만든 특수한 형태의 자료형

@ 변수 선언
-> 변수를 선언하기 위해서는 3개를 작성해야함
- 자료형, 변수명, ;
ex) int a;

논리형 변수선언
boolean bool ;// boolean, 데이터 타입을 가지는 bool 이라는 변수

문자형 변수 선언
char chl;  	// char 데이터 타입을 가지는 ch라는 변수

정수형 변수 선언
byte bnum;// byte 데이터 타입을 가지는 bnum이라는 변수
short snum;// short 데이터 타입을 가지는 snum이라는 변수
int i num;// int 데이터 타입을 가지는 inum이라는 변수
long lnum;// long 데이터 타입을 가지는 lnum이라는 변수

실수형 변수 선언
float fnum;// float 데이터 타입을 가지는 fnum이라는 변수
double dnum; // double 데이터 타입을 가지는 dnum이라는 변수

문자열 변수 선언
String str; // String 데이터 타입을 가지는 str이라는 변수

@변수 이름 명명 규칙(필수사항)

1. 대소문자가 구분되며 길이 제한이 없음
2. 예약어를 사용하면 안됨
3. 숫자로 시작하면 안됨
- 숫자는 사용해도 되지만 시작은 안된다는 뜻
4. 특수문자는 _(언더바) 와 $ 만 허용함
- sh@rp은 안되지만 $harp는 가능함

@변수 이름 명명 규칙2(권장사항)
1. 여러 단어 이름은 단어의 첫글작를 대문자로함
- ageOfVampire, userName(낙타 표기법)
2. 한글이름은 지양
- 한글 이름 변수는 가능하지만 쓰지 않기를 권장함
3. 변수명은 의미있는 이름으로 작성을 권장함
- 변수명만 보고도 데이터를 예측할수있도록 설정


@ 변수 초기화
-> 생성된 변수의 값을 대입
1. 생성과 동시에 값 대입(초기화)
int age = 20;

2. 생성후 값 대입
int age;
age = 20;
-> 주의할점은 int age;로 선언후 사용할때 int age = 20;을 하면 안됨
age = 20; 으로 해야함.

@입력받아서 변수에 대입하기.
-> Scanner 를 사용해야 함
-> Scanner 클래스는 java.util 패키지 안에 포함되어 있음.




강의 3 ( 2018.02.02 (금) )

@ Scanner Class
-> 사용자로 부터 입력되는 정수, 실수, 문자열, 문자를 처리하는 클래스
-> java.util 패키지 안에 포함되어 있음
	- import java.util.Scanner;

@Scanner 사용하기
-> Scanner sc = new Scanner(System.in);

키보드로 입력받기

정수값 입력받기 : sc.nextInt();
실수값 입력받기 : sc.nextFloat();, 혹은 sc.nextDouble();
문자열 입력받기 : sc.next();,혹은 sc.nextLine();

sc,next()는 띄어쓰기 입력 불가.
sc.nextLine()은 띄어쓰기 입력 가능.

	nextLine() 메소드를 사용할때에는 버퍼 문제를 해결 해야함.

문자 입력 받기 : sc.next().charAt(0);


@상수

-> 상수에는 리터럴 상수와 심볼릭 상수가 있음

리터럴 상수 
-> 이름이 없는 상수
-> 변수에 대입되는 갑 자체를 의미함

ex) 3,3.14, 'a', "Hello";

심볼릭 상수
-> 이름이 없이는상수
-> 변수에 값을 대입후 해당 변수를 상수화 시킴
-> final 이라는  keyword 를 사용하여 심볼릭 상수를 만듦
-> 상수로 사용되는 이름은 대문자로 사용하기로 약속되어있음.
(상수선언 명명 규칙)


@ 컴퓨터의 동작 원칙

1. 반드시 같은 데이터 타입 간에 연산을 해야 함
2. 반드시 동일한 데이터 타입의 값을 동일 한 데이터 타입 변수에 대입해야함
3. 결과값 또한 동일한 데이터 타입의 값을 가짐

*위에 기본 원칙이 지켜지지 않을 경우 프로그래밍 언어에서는 사용자에 의해 명시적으로 '형변환'을 해주거나 혹은 암묵적으로 '형변환'을 진행함


@자동 형변환
-> 연산시 컴파일러가 자동으로 형이 변환되는 것을 의미함
-> 작은 데이터형에서 큰데이터형과의 연산은 큰 데이터 형으로 자동 형변환 함


byte-> short -> int -> long -> float -> double
       char


@ 자동 형변환 되는 경우

1. 작은것에서 큰것으로 대입 될때
	byte b = 100;
	int i = b;

2. 자료형이 다른 값이 게산 될때
	int a = 3;
	couble b = 5.7;
	System.out.println(a+b);


캐스팅 연산자(강제 형변환 연산자)
ex(short) 데이터

@강제 형변환( 캐스팅 연산자)
-> 자료형을 강제적으로 형 변환 하는 연산자
-> 데이터가 큰 자료형에서 작은 자료형으로 변경시 데이터 손실이 발생할 수 있으므로
사용시 유의 해야 함
-> 사용방법은 형변환을 해얗하는 데이터 앞에 ()를 사용하여 작성함
	- ex) (int)3.14; -> 3.14를 정수로 강제 변환함( 3으로 바뀜)


-> 정수와 정수 연산 결과는 정수 결과가 나옴
 결과가 실수값으로 나와야 하는 경우에는
연산하는 두개의 값중하나는 실수로 되어 있어야함.

@출력 메소드
1. System.out.println()
-> Console 화면에 데이터를 출력후 자동 줄 개행을 해주는 메소드

2. System.out.print()
-> Console 화면에 데이터를 출력( 자동 줄개행 X)

3. System.out.printf()
-> 특정 포맨 형식을 사용하여 그 형식에 맞게 값을 출력 해줌
-> 자동 줄개행을 하지 않음(개행시 특수문자를 사용함)


포맷형신

정수표현 
%d : 10진수 %o : 8진수 %x: 16진수

실수표현
%f : 실수( 소수점 아래 6자리)
%e : 지수 표현식 
%g : %e와 %f중 더 짧은 표현으로 사용

문자 / 문자열
%c : 문자 ., %s: 문자열

불린형
%b : 논리형(true, false)


너비 및 정렬
%5d 5칸을 확보하고, 우측 정렬
%-5d 5칸을 확보하고, 좌측정렬
%.2f 소수점을 2자리까지 표기.


@특수문자( excape 문자)
 
tabae		\t	정해진 공간만큼 띄어쓰기
new line 	\n	출력하고 다음라인으로 옮김
역슬래쉬	\\	특수문자(\)를 출력
작은따옴표	\'	특수문자(')를 출력
큰따옴표	\"	특수문자(")를 출력
유니코드	\u	유니코드 표시할때 사용.


@ 연산자
-> 자바에서는 다양한 연산자를 사용하여 다양한 프로그램을 만들수 있음


@ 산술 연산자
+	:	더하기
-	:	빼기
*	:	곱하기
/	:	나누기
%	:	나머지

ex)


int a = 10;
int b = 3;

System.out.println("a+b = " + (a+b));
System.out.println("a-b = " + (a-b));
System.out.println("a*b = " + (a*b));
System.out.println("a/b = " + (a/b));
System.out.println("a%b = " + (a%b));



@ 대입연산자
=	오른쪽 값을 왼쪽 공간(변수)에 대입
+=	왼쪽과 오른쪽 값을 더한 결과값을 왼쪽 공간(변수)에 대입
-=	왼쪽과 오른쪽 값을 뺀 결과값을 왼쪽 공간(변수)에 대입
*=	왼쪽과 오른쪽 값을 곱한 결과값을 왼쪽 공간(변수)에 대입
/=	왼쪽과 오른쪽 값을 나눈 결과값을 왼쪽 공간(변수)에 대입
%=	왼쪽과 오른쪽 값을 나눈 결과값(나머지) 를 왼쪽 공간(변수)에 대입


예제)

	int a = 10;
	int b = 3;
	int c = 6;

	a += 3;
	b *= 4;
	c %= 5;

@증가 감소연산자
-> 값을 하나 증가, 하나 감소 시키는 경우에 사용되는 단항 연산자

전치(전위) 연산
-> 변수에 저장된 값을 증/감 시킨 후 연산

후치(후위) 연산
-> 연산 수행후 변수에 저장된 값을 증/감 시킨다.

a++	연산을 진행한 후 값을 1 증가 ( 선 연산, 후 증가)
++a	값을 1 증가 시킨후 연산을 진행( 선 증가, 후 연산)
b--	연산을 진행한 후 값을 1 감소( 선 연산, 후감소)
--b	값을 1 감소 시킨후, 연산을 진행( 선 감소, 후 연산)




@관계 연산자(비교 연산자)
-> 두개의 변수 관계를 따지는 연산자, 다른 말로는 비교 연산자 라고 함
-> 관계 연산자는 조건을 만족하면 ,true,
	만족하지 못하면 false 값을 리턴(반환)

<	ex) a<b	 	a가 b보다 작은가?
>	ex) a>b		a가 b보다 큰가?
==	ex) a==b	a가 b와 같은가?
!-	ex) a!=b	a가 b가 다른가?
<=	ex) a<=b	a가 b보다 작거나 같은가?
>=	ex) a>=b	a가 b보다 크거나 같은가?
	

@논리 연산자
-> 여러 조건을 동시에 검사할 때 주로 사용하는 연산자
-> and(그리고), or(또는), not(그러나) 를 표현하는 연산자

&&	 피연산자가 모두 참이면 true 를 반환( and의 의미)
||	피련산자 중 하나라도 참이면 true를 반환( or의 의미)
!	피연산자가 true면 false를 false면 true 를 반환(not 의 의미)


@비트 연산자
-> 2진수로 변환하여 비트 단위의 연산을 수행하는 연산자
-> 정수형 타입에서만 사용 가능함
-> 주로 하드웨어를 직접 제어하거나 한글등을 처리할때 사요함
&	 비트단위 AND연산자
|	 비트단위 OR 연산자
^	비트단위 XOR연산자
~	비트단위 NOT연산자
<<	 왼쪽으로 비트 이동 연산자( 왼쪽 쉬프트 연산자)
>>ㅇ	오른쪽으로 비트 이동 연산자( 오른쪽 쉬프르 연산자)



### & 연산자
-> 두개의 비트가 1이면 결과는 1, 두개중 1개라도 0이면 결과는 0


